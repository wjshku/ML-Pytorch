{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "904ae7f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "import torch\n",
    "import torchvision\n",
    "from torchvision.datasets import MNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "23431917",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Download training dataset\n",
    "dataset = MNIST(root='data/', download=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "cfb184c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_dataset = MNIST(root='data/', train=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4efb4745",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "cc4da6af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label: 5\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "image, label = dataset[0]\n",
    "plt.imshow(image, cmap='gray')\n",
    "print('Label:', label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "455fb1be",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torchvision.transforms as transforms\n",
    "# MNIST dataset (images and labels)\n",
    "dataset = MNIST(root='data/', \n",
    "                train=True,\n",
    "                transform=transforms.ToTensor())\n",
    "img_tensor,label = dataset[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "366e2bc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1, 28, 28]) 5\n",
      "tensor([[0.0039, 0.6039, 0.9922, 0.3529, 0.0000],\n",
      "        [0.0000, 0.5451, 0.9922, 0.7451, 0.0078],\n",
      "        [0.0000, 0.0431, 0.7451, 0.9922, 0.2745],\n",
      "        [0.0000, 0.0000, 0.1373, 0.9451, 0.8824],\n",
      "        [0.0000, 0.0000, 0.0000, 0.3176, 0.9412]])\n",
      "tensor(1.) tensor(0.)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(img_tensor.shape,label)\n",
    "print(img_tensor[0,10:15,10:15])\n",
    "print(torch.max(img_tensor), torch.min(img_tensor))\n",
    "# Plot the image by passing in the 28x28 matrix\n",
    "plt.imshow(img_tensor[0,10:15,10:15], cmap='gray');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8bea80e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50000, 10000)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# https://www.tutorialsteacher.com/python/magic-methods-in-python\n",
    "# tensor.__len__() is the same as len(tensor), because len is a magic method\n",
    "from torch.utils.data import random_split\n",
    "\n",
    "train_ds, val_ds = random_split(dataset, [50000, 10000])\n",
    "len(train_ds), len(val_ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "795cf46a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader\n",
    "batch_size = 128\n",
    "train_loader = DataLoader(train_ds, batch_size, shuffle=True)\n",
    "val_loader = DataLoader(val_ds, batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "58a45a41",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "\n",
    "input_size = 28*28\n",
    "num_classes = 10\n",
    "\n",
    "# Logistic regression model\n",
    "model = nn.Linear(input_size, num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6280356c",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(model.weight.shape)\n",
    "print(model.weight)\n",
    "print(model.bias.shape)\n",
    "model.bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd289db7",
   "metadata": {},
   "outputs": [],
   "source": [
    "for images, labels in train_loader:\n",
    "    print(labels)\n",
    "    print(images.shape)\n",
    "    images = torch.reshape(images,(128,784))\n",
    "    outputs = model(images)\n",
    "    print(outputs)\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ba5c1544",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We define a model here by ourselves so that we do not need to do the reshape every time\n",
    "class Mymodel(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.linear = nn.Linear(input_size, num_classes)\n",
    "    def forward(self,xb):\n",
    "        xb = xb.reshape(-1,input_size)\n",
    "        out = self.linear(xb)\n",
    "        return out\n",
    "model = Mymodel()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2d7877cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([10, 784]) torch.Size([10])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[Parameter containing:\n",
       " tensor([[-0.0161,  0.0318, -0.0188,  ...,  0.0308,  0.0330, -0.0266],\n",
       "         [ 0.0337, -0.0319, -0.0022,  ..., -0.0111,  0.0234, -0.0300],\n",
       "         [-0.0250, -0.0006, -0.0328,  ...,  0.0160, -0.0144, -0.0066],\n",
       "         ...,\n",
       "         [-0.0053,  0.0276, -0.0107,  ...,  0.0067,  0.0133, -0.0337],\n",
       "         [-0.0062, -0.0224, -0.0250,  ...,  0.0107,  0.0087, -0.0211],\n",
       "         [-0.0325,  0.0279,  0.0271,  ..., -0.0308, -0.0217, -0.0291]],\n",
       "        requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([-0.0283,  0.0068,  0.0161, -0.0074, -0.0185,  0.0116,  0.0147,  0.0011,\n",
       "          0.0307,  0.0010], requires_grad=True)]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check how our model works\n",
    "model.linear\n",
    "print(model.linear.weight.shape, model.linear.bias.shape)\n",
    "list(model.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "907a8484",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([128, 1, 28, 28])\n",
      "tensor([[ 1.1288, -3.2538,  1.4205,  ..., -0.8388, -1.1720, -1.6289],\n",
      "        [-2.2524,  0.7457,  0.0295,  ..., -1.2189,  0.9931,  0.2954],\n",
      "        [-0.7380, -0.3657,  0.0964,  ..., -2.2763,  0.7354, -0.7760],\n",
      "        ...,\n",
      "        [ 0.4936, -2.2101,  0.3707,  ..., -2.2678,  1.1083, -1.7581],\n",
      "        [ 1.0912,  0.0219, -0.9189,  ..., -1.0488,  1.7987, -1.2825],\n",
      "        [-1.4395, -0.7756,  2.4351,  ...,  0.3740,  1.9879, -1.6966]],\n",
      "       grad_fn=<AddmmBackward>)\n"
     ]
    }
   ],
   "source": [
    "for images, labels in train_loader:\n",
    "    print(images.shape)\n",
    "    outputs = model(images)\n",
    "    break\n",
    "print(outputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "e3e89046",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample probabilities:\n",
      " tensor([[0.0821, 0.0010, 0.1099, 0.0087, 0.0476, 0.0733, 0.6525, 0.0115, 0.0082,\n",
      "         0.0052],\n",
      "        [0.0067, 0.1348, 0.0659, 0.0564, 0.3400, 0.0345, 0.0841, 0.0189, 0.1727,\n",
      "         0.0859]])\n",
      "Sum:  1.0\n",
      "tensor([6, 4, 6, 5, 9, 9, 9, 5, 7, 6, 3, 2, 4, 6, 4, 9, 6, 3, 7, 7, 2, 0, 6, 1,\n",
      "        6, 6, 6, 7, 6, 2, 0, 6, 7, 6, 7, 6, 9, 0, 8, 8, 9, 1, 4, 1, 5, 6, 3, 0,\n",
      "        3, 9, 9, 2, 4, 5, 0, 0, 8, 0, 9, 9, 9, 9, 1, 5, 6, 2, 6, 8, 7, 8, 2, 8,\n",
      "        9, 7, 7, 9, 5, 8, 0, 8, 9, 9, 5, 5, 3, 4, 3, 3, 5, 1, 8, 2, 1, 1, 6, 5,\n",
      "        4, 1, 5, 2, 6, 7, 8, 4, 3, 3, 6, 1, 7, 0, 7, 0, 2, 1, 9, 2, 5, 8, 6, 2,\n",
      "        6, 6, 3, 8, 2, 5, 5, 2])\n",
      "tensor([6, 4, 6, 3, 9, 9, 9, 5, 7, 6, 3, 2, 4, 6, 4, 9, 6, 3, 7, 7, 2, 0, 6, 7,\n",
      "        6, 6, 6, 7, 6, 2, 0, 2, 7, 6, 7, 6, 7, 0, 8, 8, 9, 1, 4, 1, 7, 6, 3, 0,\n",
      "        3, 9, 8, 2, 4, 5, 0, 0, 8, 0, 9, 9, 9, 9, 1, 5, 6, 2, 6, 8, 7, 8, 6, 1,\n",
      "        9, 7, 7, 9, 5, 5, 0, 8, 9, 7, 5, 5, 3, 4, 3, 3, 5, 5, 8, 2, 1, 1, 6, 5,\n",
      "        9, 1, 5, 2, 6, 7, 8, 4, 3, 3, 6, 1, 7, 0, 7, 0, 2, 1, 9, 2, 5, 8, 6, 2,\n",
      "        6, 6, 3, 1, 2, 5, 5, 2])\n",
      "tensor([0.6525, 0.3400, 0.4841, 0.5030, 0.7920, 0.6377, 0.8082, 0.8553, 0.4551,\n",
      "        0.8574, 0.5535, 0.3888, 0.6091, 0.9793, 0.8756, 0.5078, 0.9367, 0.4497,\n",
      "        0.5531, 0.5089, 0.8813, 0.9306, 0.5474, 0.7927, 0.9177, 0.9128, 0.9001,\n",
      "        0.6311, 0.5741, 0.9894, 0.7542, 0.4840, 0.5176, 0.8817, 0.9481, 0.5084,\n",
      "        0.2621, 0.9154, 0.3730, 0.7891, 0.7143, 0.9197, 0.8614, 0.9252, 0.2317,\n",
      "        0.9069, 0.6574, 0.8189, 0.4976, 0.7446, 0.6921, 0.8386, 0.8883, 0.7148,\n",
      "        0.8673, 0.9891, 0.8954, 0.8883, 0.6311, 0.7533, 0.5499, 0.5815, 0.8919,\n",
      "        0.4472, 0.6016, 0.8987, 0.6607, 0.7498, 0.5385, 0.8085, 0.2689, 0.4858,\n",
      "        0.4784, 0.8263, 0.9051, 0.7078, 0.7287, 0.3128, 0.9287, 0.3032, 0.6305,\n",
      "        0.4608, 0.5095, 0.5764, 0.5230, 0.6463, 0.5967, 0.6663, 0.5223, 0.3640,\n",
      "        0.5823, 0.7054, 0.8196, 0.7532, 0.8329, 0.8645, 0.2408, 0.9168, 0.8315,\n",
      "        0.9147, 0.7870, 0.9323, 0.8003, 0.7382, 0.6302, 0.3645, 0.7407, 0.8168,\n",
      "        0.9237, 0.6947, 0.8809, 0.9123, 0.8464, 0.8892, 0.7653, 0.9478, 0.4457,\n",
      "        0.7734, 0.9490, 0.9929, 0.9886, 0.8385, 0.8428, 0.6742, 0.9696, 0.5599,\n",
      "        0.5665, 0.3923], grad_fn=<MaxBackward0>)\n"
     ]
    }
   ],
   "source": [
    "import torch.nn.functional as F\n",
    "# Apply softmax for each output row\n",
    "probs = F.softmax(outputs, dim=1)\n",
    "# Look at sample probabilities\n",
    "print(\"Sample probabilities:\\n\", probs[:2].data)\n",
    "\n",
    "# Add up the probabilities of an output row\n",
    "print(\"Sum: \", torch.sum(probs[0]).item())\n",
    "\n",
    "max_probs, preds = torch.max(probs, dim=1)\n",
    "print(preds)\n",
    "print(labels)\n",
    "print(max_probs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "81d51025",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'labels' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-19-718edc4f454e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      9\u001b[0m     \u001b[0moutput\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m     \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 11\u001b[1;33m \u001b[0mtargets\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrelabels\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtargets\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'labels' is not defined"
     ]
    }
   ],
   "source": [
    "#This function is used to extend our result to x*10 matrix\n",
    "def relabels(labels):\n",
    "    output = torch.zeros(10)\n",
    "    output[labels[0].item()] = 1\n",
    "    for label in labels[1:]:\n",
    "        temp = torch.zeros(10)\n",
    "        temp[label.item()] = 1\n",
    "        output = torch.cat((output,temp),0)\n",
    "    output = torch.reshape(output,(-1,10))\n",
    "    return(output)\n",
    "targets = relabels(labels)\n",
    "print(targets[:2])\n",
    "print(labels[:2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "effd12a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(torch.sum(preds == labels))\n",
    "def accuracy(outputs, labels):\n",
    "    _, preds = torch.max(outputs, dim=1)\n",
    "    return torch.tensor(torch.sum(preds == labels).item() / len(preds))\n",
    "#accuracy(outputs, labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f8266371",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'probs' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-17-582de91503ee>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[0mloss\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m-\u001b[0m\u001b[0mtorch\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmul\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpreds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mtargets\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmul\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprobs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mtargets\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m \u001b[0mloss\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmyloss\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprobs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mtargets\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'probs' is not defined"
     ]
    }
   ],
   "source": [
    "#Write my loss function\n",
    "def myloss(preds,targets):\n",
    "    loss = -torch.sum(torch.mul(torch.log(preds),targets))\n",
    "    return(loss)\n",
    "print(torch.mul(torch.log(probs[0]),targets[0]))\n",
    "loss = myloss(probs[0],targets[0])\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8d4671f9",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'outputs' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-12-e9ebc32dfd72>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mloss_fn\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcross_entropy\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m \u001b[0mloss\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mloss_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'outputs' is not defined"
     ]
    }
   ],
   "source": [
    "import torch.nn.functional as F\n",
    "#The nn.functional package contains many useful loss functions and several other utilities.\n",
    "\n",
    "# Define loss function\n",
    "loss_fn = F.cross_entropy\n",
    "\n",
    "loss = loss_fn(outputs, labels)\n",
    "print(loss)\n",
    "\n",
    "opt = torch.optim.SGD(model.parameters(), lr=1e-3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c42fb61d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def myfit(num_epochs,train_dl,val_dl,model,loss_fn,opt):\n",
    "    history = []\n",
    "    for epoch in range(num_epochs):\n",
    "        for images,labels in train_dl:\n",
    "            preds = model(images)\n",
    "            targets = relabels(labels)\n",
    "            probs = F.softmax(preds, dim=1)\n",
    "            loss = loss_fn(probs,targets)\n",
    "            loss.backward()\n",
    "            opt.step()\n",
    "            opt.zero_grad()\n",
    "            break\n",
    "        if (epoch+1)%10 == 0:\n",
    "            result = evaluate(model,val_dl)\n",
    "            history.append(result)\n",
    "    return(history)\n",
    "            \n",
    "def fit(num_epochs,train_dl,model,loss_fn,opt):\n",
    "    for epoch in range(num_epochs):\n",
    "        for images,labels in train_dl:\n",
    "            preds = model(images)\n",
    "            loss = loss_fn(preds,labels)\n",
    "            loss.backward()\n",
    "            opt.step()\n",
    "            opt.zero_grad()\n",
    "            break\n",
    "        # Print the progress\n",
    "        if (epoch+1) % 10 == 0:\n",
    "            print('Epoch [{}/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, loss.item()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "9edca74c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(model, val_loader):\n",
    "    outputs = [model.validation_step(batch) for batch in val_loader]\n",
    "    return model.validation_epoch_end(outputs)\n",
    "\n",
    "class MnistModel(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.linear = nn.Linear(input_size, num_classes)\n",
    "        \n",
    "    def forward(self, xb):\n",
    "        xb = xb.reshape(-1, 784)\n",
    "        out = self.linear(xb)\n",
    "        return out\n",
    "    \n",
    "    def training_step(self, batch):\n",
    "        images, labels = batch \n",
    "        out = self(images)                  # Generate predictions\n",
    "        loss = F.cross_entropy(out, labels) # Calculate loss\n",
    "        return loss\n",
    "    \n",
    "    def validation_step(self, batch):\n",
    "        images, labels = batch \n",
    "        out = self(images)                    # Generate predictions\n",
    "        loss = F.cross_entropy(out, labels)   # Calculate loss\n",
    "        acc = accuracy(out, labels)           # Calculate accuracy\n",
    "        return {'val_loss': loss, 'val_acc': acc}\n",
    "        \n",
    "    def validation_epoch_end(self, outputs):\n",
    "        batch_losses = [x['val_loss'] for x in outputs]\n",
    "        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n",
    "        batch_accs = [x['val_acc'] for x in outputs]\n",
    "        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n",
    "        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n",
    "    \n",
    "    def epoch_end(self, epoch, result):\n",
    "        print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch, result['val_loss'], result['val_acc']))\n",
    "\n",
    "def fit_pro(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n",
    "    optimizer = opt_func(model.parameters(), lr)\n",
    "    history = [] # for recording epoch-wise results\n",
    "    \n",
    "    for epoch in range(epochs):\n",
    "        \n",
    "        # Training Phase \n",
    "        for batch in train_loader:\n",
    "            loss = model.training_step(batch)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            optimizer.zero_grad()\n",
    "        \n",
    "        # Validation phase\n",
    "        result = evaluate(model, val_loader)\n",
    "        model.epoch_end(epoch, result)\n",
    "        history.append(result)\n",
    "\n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "c414f41d",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = MnistModel()\n",
    "opt = torch.optim.SGD(model.parameters(), lr=1e-3)\n",
    "result0 = evaluate(model, val_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "746232e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [10/100], Loss: 0.3664\n",
      "Epoch [20/100], Loss: 0.3715\n",
      "Epoch [30/100], Loss: 0.6188\n",
      "Epoch [40/100], Loss: 0.3133\n",
      "Epoch [50/100], Loss: 0.4165\n",
      "Epoch [60/100], Loss: 0.5402\n",
      "Epoch [70/100], Loss: 0.4570\n",
      "Epoch [80/100], Loss: 0.5253\n",
      "Epoch [90/100], Loss: 0.5320\n",
      "Epoch [100/100], Loss: 0.4474\n"
     ]
    }
   ],
   "source": [
    "fit(100, train_loader, model, loss_fn, opt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "49c6ed3f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'val_loss': 1.43230140209198, 'val_acc': 0.7762064933776855},\n",
       " {'val_loss': 1.088355302810669, 'val_acc': 0.800039529800415},\n",
       " {'val_loss': 0.9114641547203064, 'val_acc': 0.8071597814559937},\n",
       " {'val_loss': 0.7993192672729492, 'val_acc': 0.8342563509941101},\n",
       " {'val_loss': 0.7288346886634827, 'val_acc': 0.8440466523170471},\n",
       " {'val_loss': 0.6790899634361267, 'val_acc': 0.8508702516555786},\n",
       " {'val_loss': 0.6400753259658813, 'val_acc': 0.8491891026496887},\n",
       " {'val_loss': 0.6116676330566406, 'val_acc': 0.858781635761261},\n",
       " {'val_loss': 0.5883133411407471, 'val_acc': 0.8541337251663208},\n",
       " {'val_loss': 0.5660426616668701, 'val_acc': 0.8596716523170471}]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history = myfit(100, train_loader,val_loader, model, myloss, opt)\n",
    "history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "ddc482a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "history = [result0]+history\n",
    "accuracies = [result['val_acc'] for result in history]\n",
    "plt.plot(accuracies, '-x')\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('accuracy')\n",
    "plt.title('Accuracy vs. No. of epochs');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "582d57c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cross(model,val_dl):\n",
    "    for images,labels in val_dl:\n",
    "        outputs= model(images)\n",
    "        probs = F.softmax(outputs, dim=1)\n",
    "        prediction(model,images,labels)\n",
    "        return(accuracy(outputs,labels)) \n",
    "def prediction(model,images,labels):\n",
    "    outputs = model(images)\n",
    "    probs = F.softmax(outputs, dim=1)\n",
    "    max_probs, preds = torch.max(probs, dim=1)\n",
    "    print(preds)\n",
    "    print(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4a2d6cb7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [0], val_loss: 1.3867, val_acc: 0.7859\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history1 = fit_pro(1, 0.001, model, train_loader, val_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3142fb38",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "opt = torch.optim.SGD(model.parameters(), lr=1e-4)\n",
    "history1 = myfit(100, train_loader,val_loader, model, myloss, opt)\n",
    "history = history + history1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "84751213",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "accuracies = [result['val_acc'] for result in history]\n",
    "plt.plot(accuracies, '-x')\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('accuracy')\n",
    "plt.title('Accuracy vs. No. of epochs');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "0684e04b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Next, lets test our model on individual images\n",
    "# Define test dataset\n",
    "test_dataset = MNIST(root='data/', \n",
    "                     train=False,\n",
    "                     transform=transforms.ToTensor())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73ec595d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pre_img(image,model):\n",
    "    output = model(image)\n",
    "    _,pred = torch.max(output,dim=1)\n",
    "    return(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "5cf64563",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "471\n",
      "Shape: torch.Size([1, 28, 28])\n",
      "Label: 9\n",
      "Predict: 9\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "number = torch.randint(0,1000,(1,)).item()\n",
    "print(number)\n",
    "img, label = test_dataset[number]\n",
    "plt.imshow(img[0], cmap='gray')\n",
    "print('Shape:', img.shape)\n",
    "print('Label:', label)\n",
    "print('Predict:',pre_img(img,model).item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "ef0b5876",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'val_loss': 0.5316900014877319, 'val_acc': 0.878710925579071}"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_dataloader = DataLoader(test_dataset,batch_size = 256)\n",
    "evaluate(model,test_dataloader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "d175010c",
   "metadata": {},
   "outputs": [],
   "source": [
    "torch.save(model.state_dict(), 'mnist-logistic.pth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "73888597",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('linear.weight',\n",
       "              tensor([[ 0.0114,  0.0149, -0.0163,  ..., -0.0069, -0.0306, -0.0297],\n",
       "                      [ 0.0321, -0.0226, -0.0118,  ...,  0.0213,  0.0197, -0.0100],\n",
       "                      [ 0.0035,  0.0140,  0.0343,  ..., -0.0221, -0.0159, -0.0088],\n",
       "                      ...,\n",
       "                      [ 0.0033, -0.0151,  0.0144,  ..., -0.0302, -0.0075,  0.0066],\n",
       "                      [-0.0224, -0.0226, -0.0058,  ...,  0.0297, -0.0066, -0.0344],\n",
       "                      [ 0.0010, -0.0291, -0.0184,  ..., -0.0332, -0.0255,  0.0156]])),\n",
       "             ('linear.bias',\n",
       "              tensor([ 0.0299,  0.0052,  0.0350, -0.0278,  0.0249, -0.0113, -0.0219,  0.0281,\n",
       "                       0.0305, -0.0300]))])"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2 = MnistModel()\n",
    "model2.state_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "d6f59e03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.load_state_dict(torch.load('mnist-logistic.pth'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31dc7674",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Part3: Housing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "92200312",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "import torch\n",
    "import jovian\n",
    "import torchvision\n",
    "import torch.nn as nn\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import torch.nn.functional as F\n",
    "from torchvision.datasets.utils import download_url\n",
    "from torch.utils.data import DataLoader, TensorDataset, random_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "462011cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hyperparameters\n",
    "batch_size=64\n",
    "learning_rate=5e-7\n",
    "\n",
    "\n",
    "# Other constants\n",
    "DATASET_URL = \"https://raw.githubusercontent.com/selva86/datasets/master/BostonHousing.csv\"\n",
    "DATA_FILENAME = \"BostonHousing.csv\"\n",
    "TARGET_COLUMN = 'medv'\n",
    "input_size=13\n",
    "output_size=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfa00672",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dataset & Dataloader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "439257bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100.3%"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading https://raw.githubusercontent.com/selva86/datasets/master/BostonHousing.csv to .\\BostonHousing.csv\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>crim</th>\n",
       "      <th>zn</th>\n",
       "      <th>indus</th>\n",
       "      <th>chas</th>\n",
       "      <th>nox</th>\n",
       "      <th>rm</th>\n",
       "      <th>age</th>\n",
       "      <th>dis</th>\n",
       "      <th>rad</th>\n",
       "      <th>tax</th>\n",
       "      <th>ptratio</th>\n",
       "      <th>b</th>\n",
       "      <th>lstat</th>\n",
       "      <th>medv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n",
       "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n",
       "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n",
       "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n",
       "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n",
       "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n",
       "\n",
       "        b  lstat  medv  \n",
       "0  396.90   4.98  24.0  \n",
       "1  396.90   9.14  21.6  \n",
       "2  392.83   4.03  34.7  \n",
       "3  394.63   2.94  33.4  \n",
       "4  396.90   5.33  36.2  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Download the data\n",
    "download_url(DATASET_URL, '.')\n",
    "dataframe = pd.read_csv(DATA_FILENAME)\n",
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "c8b42684",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((506, 13), (506, 1))"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert from Pandas dataframe to numpy arrays\n",
    "inputs = dataframe.drop('medv', axis=1).values\n",
    "targets = dataframe[['medv']].values\n",
    "inputs.shape, targets.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "a0a00286",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert to PyTorch dataset\n",
    "dataset = TensorDataset(torch.tensor(inputs, dtype=torch.float32), torch.tensor(targets, dtype=torch.float32))\n",
    "train_ds, val_ds = random_split(dataset, [406, 100])\n",
    "\n",
    "train_loader = DataLoader(train_ds, batch_size, shuffle=True)\n",
    "val_loader = DataLoader(val_ds, batch_size*2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb63933d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "4d1fa23b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class HousingModel(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.linear = nn.Linear(input_size, output_size)\n",
    "        \n",
    "    def forward(self, xb):\n",
    "        out = self.linear(xb)\n",
    "        return out\n",
    "    \n",
    "    def training_step(self, batch):\n",
    "        inputs, targets = batch \n",
    "        out = self(inputs)                 # Generate predictions\n",
    "        loss = F.mse_loss(out, targets)    # Calculate loss\n",
    "        return loss\n",
    "    \n",
    "    def validation_step(self, batch):\n",
    "        inputs, targets = batch \n",
    "        out = self(inputs)                 # Generate predictions\n",
    "        loss = F.mse_loss(out, targets)    # Calculate loss\n",
    "        return {'val_loss': loss.detach()}\n",
    "        \n",
    "    def validation_epoch_end(self, outputs):\n",
    "        batch_losses = [x['val_loss'] for x in outputs]\n",
    "        epoch_loss = torch.stack(batch_losses).mean()\n",
    "        #epoch_loss = sum(batch_losses)/len(batch_losses)\n",
    "        return {'val_loss':epoch_loss.item()}\n",
    "        #return {'val_loss':epoch_loss}\n",
    "        \n",
    "    def epoch_end(self, epoch, result):\n",
    "        print(\"Epoch [{}], val_loss: {:.4f}\".format(epoch, result['val_loss']))\n",
    "    \n",
    "model = HousingModel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "914a0802",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "a780b225",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(model, val_loader):\n",
    "    outputs = [model.validation_step(batch) for batch in val_loader]\n",
    "    return model.validation_epoch_end(outputs)\n",
    "\n",
    "def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n",
    "    history = []\n",
    "    optimizer = opt_func(model.parameters(), lr)\n",
    "    for epoch in range(epochs):\n",
    "        # Training Phase \n",
    "        for batch in train_loader:\n",
    "            loss = model.training_step(batch)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            optimizer.zero_grad()\n",
    "        # Validation phase\n",
    "        result = evaluate(model, val_loader)\n",
    "        model.epoch_end(epoch, result)\n",
    "        history.append(result)\n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "1a0affc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'val_loss': 986.7291259765625}"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = evaluate(model,val_loader)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "e9e8d94a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [0], val_loss: 178.5065\n",
      "Epoch [1], val_loss: 164.0450\n",
      "Epoch [2], val_loss: 158.0918\n",
      "Epoch [3], val_loss: 153.7888\n",
      "Epoch [4], val_loss: 150.8697\n",
      "Epoch [5], val_loss: 151.4453\n",
      "Epoch [6], val_loss: 146.5511\n",
      "Epoch [7], val_loss: 146.0607\n",
      "Epoch [8], val_loss: 143.9241\n",
      "Epoch [9], val_loss: 148.1671\n"
     ]
    }
   ],
   "source": [
    "history = fit(10, learning_rate, model, train_loader, val_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "4987cee4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "losses = [r['val_loss'] for r in [result] + history]\n",
    "plt.plot(losses, '-x')\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('val_loss')\n",
    "plt.title('val_loss vs. epochs');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c8a9612",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "913b5eab",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict_single(x, model):\n",
    "    xb = x.unsqueeze(0)\n",
    "    return model(x).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "85688ccd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input:  tensor([  0.4124,   0.0000,   6.2000,   0.0000,   0.5040,   7.1630,  79.9000,\n",
      "          3.2157,   8.0000, 307.0000,  17.4000, 372.0800,   6.3600])\n",
      "Target:  31.600000381469727\n",
      "Prediction: 16.561443328857422\n"
     ]
    }
   ],
   "source": [
    "x, target = val_ds[10]\n",
    "pred = predict_single(x, model)\n",
    "print(\"Input: \", x)\n",
    "print(\"Target: \", target.item())\n",
    "print(\"Prediction:\", pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "3a803f95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[  0.4124,   0.0000,   6.2000,   0.0000,   0.5040,   7.1630,  79.9000,\n",
       "           3.2157,   8.0000, 307.0000,  17.4000, 372.0800,   6.3600]])"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.unsqueeze(0) \n",
    "# Returns a new tensor with a dimension of size one inserted at the specified position.\n",
    "#https://pytorch.org/docs/stable/generated/torch.unsqueeze.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
